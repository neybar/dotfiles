#These color defs are used later in other files
if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0
	if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
		BLUE=$(tput setaf 4)
		GREEN=$(tput setaf 190)
		MAGENTA=$(tput setaf 9)
		ORANGE=$(tput setaf 172)
		PURPLE=$(tput setaf 141)
        RED=$(tput setaf 1)
		WHITE=$(tput setaf 0)
        YELLOW=$(tput setaf 3)
	else
		BLUE=$(tput setaf 4)
		GREEN=$(tput setaf 2)
		MAGENTA=$(tput setaf 5)
		ORANGE=$(tput setaf 4)
		PURPLE=$(tput setaf 1)
		RED=$(tput setaf 1)
		WHITE=$(tput setaf 7)
        YELLOW=$(tput setaf 3)
	fi
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	BLUE="\033[1;34m"
	GREEN="\033[1;32m"
	MAGENTA="\033[1;31m"
	ORANGE="\033[1;33m"
	PURPLE="\033[1;35m"
	RED="\033[1;31m"
	WHITE="\033[1;37m"
	YELLOW="\033[1;33m"
	BOLD=""
	RESET="\033[m"
fi

export BLUE
export GREEN
export MAGENTA
export ORANGE
export PURPLE
export RED
export WHITE
export YELLOW
export BOLD
export RESET

# If this is an xterm set the title to user@host:dir
case $TERM in
    xterm*)
        if [[ ! $PROMPT_COMMAND =~ '033' ]]; then
            PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"; $PROMP_COMMAND'
        fi
        ;;
    *)
        ;;
esac

get_gi_branch () {
    gi_branch=''
    if [ -z "$(git rev-parse --show-toplevel 2>/dev/null)" ]; then return; fi
    gi_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
    if [ -z "$gi_branch" ]; then
        gi_branch=$(git branch 2>/dev/null | sed -n '/^\*/s/^\* //p');
        if [ -z "$gi_branch" ]; then return; fi
    fi
    if git diff --quiet 2>&1 1>/dev/null; then
        if git diff --quiet --staged 2>&1 1>/dev/null; then
            gi_col=$GREEN; else gi_col=$YELLOW; fi
    else gi_col=$RED; fi
}

print_git () {
    get_gi_branch;
    if [[ ! -z "$gi_branch" ]]; then echo "$gi_col($gi_branch)$RESET"; fi
}

# export PS1='`jobs | sed "s/  */ /g" | cut -d" " -f1,3- | sed "s/\\[\([0-9]*\)\\]/\\[\e[1;33m\1\e[0;37m\\]/" `\n[\u@\h \W]\$ '
# this prompt_command will print out a colorized background job listing
prompt_command () {
    JOBS=$(jobs | sed "s/  */ /g" | cut -d" " -f1,3- | sed "s/\\[\([0-9]*\)\\]/\\[\\\033[1;33m\1\\\033[0m\\]/");
    if [[ ! -z "${JOBS}" ]]; then
        echo -e "$JOBS";
    fi
    print_git;
    unset JOBS;
}
#export PROMPT_COMMAND=prompt_command
case $PROMPT_COMMAND in
    prompt_command*)
        #pass
        ;;
    *)
        PROMPT_COMMAND="prompt_command; $PROMPT_COMMAND"
        ;;
esac
# allow a system level PS1 to go unmolested if it is more important
if [[ ! $HIDE_PS1 ]]; then
    export PS1='[\u@\h \W]\$ ';
    unset HIDE_PS1;
fi
